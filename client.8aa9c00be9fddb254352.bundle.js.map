{"version":3,"sources":["webpack:///./src/theme/theme.ts","webpack:///./src/services/game/state.ts","webpack:///./src/services/game/selectors.ts","webpack:///./src/services/game/consts.ts","webpack:///./src/services/game/actions/placeToken.ts","webpack:///./src/services/game/actions/reset.ts","webpack:///./src/index.tsx","webpack:///./src/style.css?9819","webpack:///./src/style.css","webpack:///./src/root.tsx","webpack:///./src/theme/components/ThemeProvider.tsx","webpack:///./src/store/components/StoreProvider.tsx","webpack:///./src/store/store.ts","webpack:///./src/store/reducer.ts","webpack:///./src/state.ts","webpack:///./src/services/game/reducer/index.ts","webpack:///./src/services/game/reducer/placeToken.ts","webpack:///./src/services/game/reducer/reset.ts","webpack:///./src/store/saga.ts","webpack:///./src/store/devtool-sanitizer.ts","webpack:///./src/components/App.tsx","webpack:///./src/utils.ts","webpack:///./src/components/Field.tsx","webpack:///./src/components/Grid.tsx","webpack:///./src/components/PositionedToken.tsx","webpack:///./src/components/Token.tsx","webpack:///./src/components/ResetButton.tsx"],"names":["tokenSizePx","squareSizePx","gridSizePx","getTokenIndexXY","x","y","defaultGameState","Object","freeze","turn","tokens","fill","Array","TOKENS_PER_GRID","GRIDS","grid","position","g","gameStateSelector","state","services","game","createGameSelector","localSelector","selector","createSelector","local","iterateGridWinLines","gridPositions","tokensSelector","turnSelector","winLines","from","getTokenIndexXYG","rowMajor","rowMinor","columnMajor","columnMinor","iterateWinLines","winningEntry","winLine","tokensMatchWinLine","token","positions","i","length","winningToken","entry","winningPositions","ACTION_PLACE_TOKEN","placeToken","type","payload","action","ACTION_RESET","reset","rootEl","document","getElementById","ReactDOM","render","content","module","options","locals","exports","push","children","theme","Provider","store","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","actionSanitizer","stateSanitizer","actionsBlacklist","compose","sagaMiddleware","applyMiddleware","run","createStore","servicesReducer","combineReducers","defaultAppState","gameReducer","isPlaceTokenAction","set","isResetAction","useSelector","grids","windowArray","map","gridIndex","Math","floor","key","_","getTokenArrayIndex","array","count","a","result","pop","width","height","childOffset","arrayChildren","React","Children","toArray","lineChildren","x1","y1","x2","y2","contentChildren","transform","strokeWidth","stroke","dispatcher","useDispatch","tokenState","isWinning","winningPosition","includes","onClick","useCallback","isWinningToken","tokenType","size","TokenX","color","TokenO","cx","cy","r","TokenBlank","dispatch"],"mappings":"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","file":"client.8aa9c00be9fddb254352.bundle.js","sourcesContent":["const theme = {\r\n  tokenSizePx: 20,\r\n  squareSizePx: 30,\r\n  gridSizePx: 30 * 3 + 20\r\n};\r\nexport default theme;\r\n\r\nexport type Theme = typeof theme;\r\n","import { TokenType } from \"./types\";\r\nimport { GRIDS, TOKENS_PER_GRID } from \"./consts\";\r\nimport { fill } from \"lodash\";\r\n\r\nexport type TokenState = TokenType | \"blank\";\r\n\r\nexport type TokensArray = TokenState[];\r\nexport interface GameState {\r\n  turn: TokenType;\r\n  tokens: TokensArray;\r\n}\r\n\r\nexport const defaultGameState: Readonly<GameState> = Object.freeze({\r\n  turn: \"x\",\r\n  tokens: fill(new Array(TOKENS_PER_GRID * GRIDS), \"blank\") as TokensArray\r\n});\r\n\r\n/**\r\n * Calculate the tokens array index of a particular token slot.\r\n * @param grid The grid index.  0 is upper left, 8 is lower right.\r\n * @param position The position inside the grid.  0 is upper left, 8 is lower right.\r\n */\r\nexport function getTokenArrayIndex(grid: number, position: number): number {\r\n  return grid * 9 + position;\r\n}\r\n\r\n/**\r\n * Calculate the index of a token from x and y without regard for which grid.\r\n * @param x\r\n * @param y\r\n */\r\nexport function getTokenIndexXYG(x: number, y: number, g: number): number {\r\n  return g * TOKENS_PER_GRID + getTokenIndexXY(x, y);\r\n}\r\n\r\nexport function getTokenIndexXY(x: number, y: number): number {\r\n  return y * 3 + x;\r\n}\r\n","import { createSelector } from \"reselect\";\r\nimport { range } from \"lodash\";\r\n\r\nimport { AppState, AppSelector } from \"@/state\";\r\nimport {\r\n  GameState,\r\n  TokensArray,\r\n  TokenState,\r\n  getTokenIndexXYG,\r\n  getTokenIndexXY\r\n} from \"./state\";\r\nimport { TokenType } from \"./types\";\r\nimport { GRIDS, TOKENS_PER_GRID } from \"./consts\";\r\n\r\ntype LocalGameSelector<T> = (state: GameState) => T;\r\n\r\ntype GameSelector<T> = AppSelector<T> & { local: LocalGameSelector<T> };\r\n\r\nfunction gameStateSelector(state: AppState) {\r\n  return state.services.game;\r\n}\r\n\r\nfunction createGameSelector<T>(\r\n  localSelector: LocalGameSelector<T>\r\n): GameSelector<T> {\r\n  const selector: GameSelector<T> = createSelector(\r\n    gameStateSelector,\r\n    localSelector\r\n  ) as any;\r\n  selector.local = localSelector;\r\n  return selector;\r\n}\r\n\r\nexport const tokensSelector = (state: AppState) => state.services.game.tokens;\r\nexport const turnSelector = (state: AppState) => state.services.game.turn;\r\n\r\ninterface WinningEntry {\r\n  token: TokenType;\r\n  positions: [number, number, number];\r\n}\r\n\r\n// There is porbably a more elegant way of finding the win lines...\r\n\r\nfunction* iterateGridWinLines(\r\n  gridPositions: number[]\r\n): Iterable<[number, number, number]> {\r\n  // horiz\r\n  for (let y = 0; y < 3; y++) {\r\n    yield [\r\n      gridPositions[getTokenIndexXY(0, y)],\r\n      gridPositions[getTokenIndexXY(1, y)],\r\n      gridPositions[getTokenIndexXY(2, y)]\r\n    ];\r\n  }\r\n\r\n  // vert\r\n  for (let x = 0; x < 3; x++) {\r\n    yield [\r\n      gridPositions[getTokenIndexXY(x, 0)],\r\n      gridPositions[getTokenIndexXY(x, 1)],\r\n      gridPositions[getTokenIndexXY(x, 2)]\r\n    ];\r\n  }\r\n\r\n  // cross\r\n  yield [\r\n    gridPositions[getTokenIndexXY(0, 0)],\r\n    gridPositions[getTokenIndexXY(1, 1)],\r\n    gridPositions[getTokenIndexXY(2, 2)]\r\n  ];\r\n  yield [\r\n    gridPositions[getTokenIndexXY(2, 0)],\r\n    gridPositions[getTokenIndexXY(1, 1)],\r\n    gridPositions[getTokenIndexXY(0, 2)]\r\n  ];\r\n}\r\n\r\nfunction* iterateWinLines(): Iterable<[number, number, number]> {\r\n  // Grids\r\n  for (let g = 0; g < 3; g++) {\r\n    yield* iterateGridWinLines([\r\n      getTokenIndexXYG(0, 0, g),\r\n      getTokenIndexXYG(1, 0, g),\r\n      getTokenIndexXYG(2, 0, g),\r\n      getTokenIndexXYG(0, 1, g),\r\n      getTokenIndexXYG(1, 1, g),\r\n      getTokenIndexXYG(2, 1, g),\r\n      getTokenIndexXYG(0, 2, g),\r\n      getTokenIndexXYG(1, 2, g),\r\n      getTokenIndexXYG(2, 2, g)\r\n    ]);\r\n  }\r\n\r\n  // Grid row slices\r\n  for (let rowMajor = 0; rowMajor < 3; rowMajor++) {\r\n    for (let rowMinor = 0; rowMinor < 3; rowMinor++) {\r\n      yield* iterateGridWinLines([\r\n        getTokenIndexXYG(0, 0, rowMajor * 3),\r\n        getTokenIndexXYG(1, 0, rowMajor * 3),\r\n        getTokenIndexXYG(2, 0, rowMajor * 3),\r\n        getTokenIndexXYG(0, 0, rowMajor * 3 + 1),\r\n        getTokenIndexXYG(1, 0, rowMajor * 3 + 1),\r\n        getTokenIndexXYG(2, 0, rowMajor * 3 + 1),\r\n        getTokenIndexXYG(0, 0, rowMajor * 3 + 2),\r\n        getTokenIndexXYG(1, 0, rowMajor * 3 + 2),\r\n        getTokenIndexXYG(2, 0, rowMajor * 3 + 2)\r\n      ]);\r\n    }\r\n  }\r\n\r\n  // Grid row cross axis\r\n  for (let rowMajor = 0; rowMajor < 3; rowMajor++) {\r\n    yield* iterateGridWinLines([\r\n      getTokenIndexXYG(0, 0, rowMajor * 3),\r\n      getTokenIndexXYG(0, 1, rowMajor * 3),\r\n      getTokenIndexXYG(0, 2, rowMajor * 3),\r\n      getTokenIndexXYG(1, 0, rowMajor * 3 + 1),\r\n      getTokenIndexXYG(1, 1, rowMajor * 3 + 1),\r\n      getTokenIndexXYG(1, 2, rowMajor * 3 + 1),\r\n      getTokenIndexXYG(2, 0, rowMajor * 3 + 2),\r\n      getTokenIndexXYG(2, 1, rowMajor * 3 + 2),\r\n      getTokenIndexXYG(2, 2, rowMajor * 3 + 2)\r\n    ]);\r\n    yield* iterateGridWinLines([\r\n      getTokenIndexXYG(0, 0, rowMajor * 3 + 2),\r\n      getTokenIndexXYG(0, 1, rowMajor * 3 + 2),\r\n      getTokenIndexXYG(0, 2, rowMajor * 3 + 2),\r\n      getTokenIndexXYG(1, 0, rowMajor * 3 + 1),\r\n      getTokenIndexXYG(1, 1, rowMajor * 3 + 1),\r\n      getTokenIndexXYG(1, 2, rowMajor * 3 + 1),\r\n      getTokenIndexXYG(2, 0, rowMajor * 3),\r\n      getTokenIndexXYG(2, 1, rowMajor * 3),\r\n      getTokenIndexXYG(2, 2, rowMajor * 3)\r\n    ]);\r\n  }\r\n\r\n  // Grid column slices\r\n  for (let columnMajor = 0; columnMajor < 3; columnMajor++) {\r\n    for (let columnMinor = 0; columnMinor < 3; columnMinor++) {\r\n      yield* iterateGridWinLines([\r\n        getTokenIndexXYG(columnMinor, 0, columnMajor),\r\n        getTokenIndexXYG(columnMinor, 1, columnMajor),\r\n        getTokenIndexXYG(columnMinor, 2, columnMajor),\r\n        getTokenIndexXYG(columnMinor, 0, columnMajor + 3),\r\n        getTokenIndexXYG(columnMinor, 1, columnMajor + 3),\r\n        getTokenIndexXYG(columnMinor, 2, columnMajor + 3),\r\n        getTokenIndexXYG(columnMinor, 0, columnMajor + 6),\r\n        getTokenIndexXYG(columnMinor, 1, columnMajor + 6),\r\n        getTokenIndexXYG(columnMinor, 2, columnMajor + 6)\r\n      ]);\r\n    }\r\n  }\r\n\r\n  // Grid column cross axis\r\n  for (let columnMajor = 0; columnMajor < 3; columnMajor++) {\r\n    yield* iterateGridWinLines([\r\n      getTokenIndexXYG(0, 0, columnMajor),\r\n      getTokenIndexXYG(1, 0, columnMajor),\r\n      getTokenIndexXYG(2, 0, columnMajor),\r\n      getTokenIndexXYG(0, 1, columnMajor + 3),\r\n      getTokenIndexXYG(1, 1, columnMajor + 3),\r\n      getTokenIndexXYG(2, 1, columnMajor + 3),\r\n      getTokenIndexXYG(0, 2, columnMajor + 6),\r\n      getTokenIndexXYG(1, 2, columnMajor + 6),\r\n      getTokenIndexXYG(2, 2, columnMajor + 6)\r\n    ]);\r\n    yield* iterateGridWinLines([\r\n      getTokenIndexXYG(0, 0, columnMajor + 6),\r\n      getTokenIndexXYG(1, 0, columnMajor + 6),\r\n      getTokenIndexXYG(2, 0, columnMajor + 6),\r\n      getTokenIndexXYG(0, 1, columnMajor + 3),\r\n      getTokenIndexXYG(1, 1, columnMajor + 3),\r\n      getTokenIndexXYG(2, 1, columnMajor + 3),\r\n      getTokenIndexXYG(0, 2, columnMajor),\r\n      getTokenIndexXYG(1, 2, columnMajor),\r\n      getTokenIndexXYG(2, 2, columnMajor)\r\n    ]);\r\n  }\r\n\r\n  // // Crosses for second-level grid.\r\n  yield [\r\n    getTokenIndexXYG(0, 0, 0),\r\n    getTokenIndexXYG(1, 1, 4),\r\n    getTokenIndexXYG(2, 2, 8)\r\n  ];\r\n  yield [\r\n    getTokenIndexXYG(2, 0, 2),\r\n    getTokenIndexXYG(1, 1, 4),\r\n    getTokenIndexXYG(0, 2, 6)\r\n  ];\r\n}\r\n\r\nconst winLines = Array.from(iterateWinLines());\r\n\r\nconst winningEntry = createSelector(\r\n  (state: GameState) => state.tokens,\r\n  tokens => {\r\n    for (const winLine of winLines) {\r\n      const winningToken = tokensMatchWinLine(tokens, winLine);\r\n      if (!winningToken) {\r\n        continue;\r\n      }\r\n\r\n      return {\r\n        token: winningToken,\r\n        positions: winLine\r\n      } as WinningEntry;\r\n    }\r\n\r\n    return null;\r\n  }\r\n);\r\n\r\nfunction tokensMatchWinLine(\r\n  tokens: TokensArray,\r\n  winLine: [number, number, number]\r\n): TokenType | null {\r\n  const token = tokens[winLine[0]];\r\n  if (token === \"blank\") {\r\n    return null;\r\n  }\r\n\r\n  for (let i = 1; i < winLine.length; i++) {\r\n    if (tokens[winLine[i]] !== token) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return token;\r\n}\r\n\r\nexport const winningToken = createGameSelector<TokenType | null>(state => {\r\n  const entry = winningEntry(state);\r\n  if (entry) {\r\n    return entry.token;\r\n  }\r\n\r\n  return null;\r\n});\r\n\r\nexport const winningPositions = createGameSelector<number[] | null>(state => {\r\n  const entry = winningEntry(state);\r\n  if (entry) {\r\n    return entry.positions;\r\n  }\r\n\r\n  return null;\r\n});\r\n","export const TOKENS_PER_GRID = 9;\r\nexport const GRIDS = 9;\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_PLACE_TOKEN = \"@game/place-token\";\r\nexport const placeToken = (position: number) =>\r\n  ({\r\n    type: ACTION_PLACE_TOKEN,\r\n    payload: { position }\r\n  } as const);\r\nexport type PlaceTokenAction = ReturnType<typeof placeToken>;\r\nexport function isPlaceTokenAction(\r\n  action: AnyAction\r\n): action is PlaceTokenAction {\r\n  return action.type === ACTION_PLACE_TOKEN;\r\n}\r\n","import { AnyAction } from \"redux\";\r\n\r\nexport const ACTION_RESET = \"@game/reset\";\r\nexport const reset = () =>\r\n  ({\r\n    type: ACTION_RESET\r\n  } as const);\r\ntype ResetAction = ReturnType<typeof reset>;\r\nexport function isResetAction(action: AnyAction): action is ResetAction {\r\n  return action.type === ACTION_RESET;\r\n}\r\n","import \"resize-observer-polyfill\";\r\n\r\nimport \"@/style.css\";\r\n\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport Root from \"./root\";\r\n\r\nconst rootEl = document.getElementById(\"root\");\r\nif (rootEl) {\r\n  ReactDOM.render(<Root />, rootEl);\r\n}\r\n","var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./style.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","exports = module.exports = require(\"../node_modules/css-loader/dist/runtime/api.js\")(false);\n// Module\nexports.push([module.id, \"/*\\r\\nThis should be kept minimal and only provide globals\\r\\nor non-react component styles.\\r\\n*/\\r\\n\\r\\nhtml, body, #root {\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  margin: 0;\\r\\n}\", \"\"]);\n","import * as React from \"react\";\r\n\r\nimport ThemeProvider from \"@/theme/components/ThemeProvider\";\r\nimport StoreProvider from \"@/store/components/StoreProvider\";\r\n\r\nimport App from \"@/components/App\";\r\n\r\nconst Root: React.FC = () => (\r\n  <ThemeProvider>\r\n    <StoreProvider>\r\n      <App />\r\n    </StoreProvider>\r\n  </ThemeProvider>\r\n);\r\n\r\nexport default Root;\r\n","import * as React from \"react\";\r\n\r\nimport { ThemeProvider as JssProvider } from \"react-jss\";\r\n\r\nimport theme from \"../theme\";\r\n\r\nconst ThemeProvider: React.FC = ({ children }) => (\r\n  <JssProvider theme={theme}>\r\n    <>{children}</>\r\n  </JssProvider>\r\n);\r\n\r\nexport default ThemeProvider;\r\n","import * as React from \"react\";\r\n\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport store from \"../store\";\r\n\r\nconst StoreProvider: React.FC = ({ children }) => (\r\n  <Provider store={store}>{children}</Provider>\r\n);\r\nexport default StoreProvider;\r\n","import {\r\n  compose,\r\n  createStore as createReduxStore,\r\n  applyMiddleware\r\n} from \"redux\";\r\n\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nimport reducer from \"./reducer\";\r\nimport saga from \"./saga\";\r\n\r\nimport {\r\n  actionSanitizer,\r\n  stateSanitizer,\r\n  actionsBlacklist\r\n} from \"./devtool-sanitizer\";\r\n\r\nfunction createStore() {\r\n  const composeEnhancers =\r\n    (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\r\n      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n        actionSanitizer,\r\n        stateSanitizer,\r\n        actionsBlacklist\r\n      })) ||\r\n    compose;\r\n\r\n  const sagaMiddleware = createSagaMiddleware();\r\n\r\n  const store = createReduxStore(\r\n    reducer,\r\n    composeEnhancers(applyMiddleware(sagaMiddleware))\r\n  );\r\n  sagaMiddleware.run(saga);\r\n  return store;\r\n}\r\n\r\nconst store = createStore();\r\nexport default store;\r\n","import { combineReducers, AnyAction, Reducer } from \"redux\";\r\n\r\nimport { AppState, defaultAppState } from \"@/state\";\r\nimport gameReducer from \"@/services/game/reducer\";\r\nimport { GameState } from \"@/services/game/state\";\r\n\r\nconst servicesReducer = combineReducers({\r\n  // reduce-reducer types are not aligning with redux types\r\n  game: gameReducer as Reducer<GameState>\r\n});\r\n\r\nexport default function reducer(\r\n  state: AppState = defaultAppState,\r\n  action: AnyAction\r\n): AppState {\r\n  return {\r\n    services: servicesReducer(state.services, action)\r\n  };\r\n}\r\n","import { GameState, defaultGameState } from \"./services/game/state\";\r\n\r\nexport interface AppState {\r\n  services: {\r\n    game: GameState;\r\n  };\r\n}\r\n\r\nexport const defaultAppState: Readonly<AppState> = Object.freeze({\r\n  services: {\r\n    game: defaultGameState\r\n  }\r\n});\r\n\r\nexport type AppSelector<T = any> = (state: Readonly<AppState>) => T;\r\n","import reduceReducers from \"reduce-reducers\";\r\n\r\nimport placeTokenReducer from \"./placeToken\";\r\nimport { GameState } from \"../state\";\r\nimport resetReducer from \"./reset\";\r\n\r\nconst gameReducer = reduceReducers<GameState>(placeTokenReducer, resetReducer);\r\nexport default gameReducer;\r\n","import { AnyAction } from \"redux\";\r\nimport { set as setFp } from \"lodash/fp\";\r\nimport { GameState, defaultGameState, getTokenArrayIndex } from \"../state\";\r\nimport { isPlaceTokenAction } from \"../actions/placeToken\";\r\nimport { winningPositions } from \"../selectors\";\r\n\r\nexport default function placeTokenReducer(\r\n  state: GameState = defaultGameState,\r\n  action: AnyAction\r\n): GameState {\r\n  if (!isPlaceTokenAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  // Dont place a token if someone already won.\r\n  if (winningPositions.local(state)) {\r\n    return state;\r\n  }\r\n\r\n  const { position } = action.payload;\r\n\r\n  if (state.tokens[position] !== \"blank\") {\r\n    return state;\r\n  }\r\n\r\n  state = {\r\n    ...state,\r\n    tokens: setFp([position], state.turn, state.tokens),\r\n    turn: state.turn === \"x\" ? \"o\" : \"x\"\r\n  };\r\n\r\n  return state;\r\n}\r\n","import { GameState, defaultGameState } from \"../state\";\r\nimport { AnyAction } from \"redux\";\r\nimport { isResetAction } from \"@/services/game/actions/reset\";\r\n\r\nexport default function resetReducer(\r\n  state: GameState = defaultGameState,\r\n  action: AnyAction\r\n): GameState {\r\n  if (!isResetAction(action)) {\r\n    return state;\r\n  }\r\n\r\n  return defaultGameState;\r\n}\r\n","import { fork } from \"redux-saga/effects\";\r\n\r\nexport default function* rootSaga(): IterableIterator<any> {}\r\n","import { AnyAction } from \"redux\";\r\n\r\nimport { AppState } from \"@/state\";\r\n\r\nexport const actionsBlacklist: string[] = [];\r\n\r\nexport function actionSanitizer(action: AnyAction): AnyAction {\r\n  return action;\r\n}\r\n\r\nexport function stateSanitizer(state: AppState): any {\r\n  return state;\r\n}\r\n","import * as React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { windowArray } from \"@/utils\";\r\nimport { TOKENS_PER_GRID } from \"@/services/game/consts\";\r\n\r\nimport { getTokenArrayIndex } from \"@/services/game/state\";\r\nimport { tokensSelector, turnSelector } from \"@/services/game/selectors\";\r\n\r\nimport theme from \"@/theme/theme\";\r\n\r\nimport Field from \"./Field\";\r\nimport Grid from \"./Grid\";\r\nimport PositionedToken from \"./PositionedToken\";\r\nimport ResetButton from \"./ResetButton\";\r\n\r\nconst App: React.FC = () => {\r\n  const tokens = useSelector(tokensSelector);\r\n  const turn = useSelector(turnSelector);\r\n  const grids = windowArray(tokens, TOKENS_PER_GRID);\r\n  return (\r\n    <div>\r\n      <Field>\r\n        {grids.map((tokens, gridIndex) => {\r\n          const x = gridIndex % 3;\r\n          const y = Math.floor(gridIndex / 3);\r\n          return (\r\n            <Grid\r\n              key={gridIndex}\r\n              x={theme.gridSizePx * x + 20}\r\n              y={theme.gridSizePx * y + 20}\r\n            >\r\n              {tokens.map((_, i) => {\r\n                const position = getTokenArrayIndex(gridIndex, i);\r\n                return <PositionedToken key={position} position={position} />;\r\n              })}\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Field>\r\n      <div>Turn: {turn}</div>\r\n      <ResetButton />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","export function windowArray<T>(array: T[], count: number): T[][] {\r\n  const a = [...array];\r\n\r\n  let result: T[][] = [];\r\n  let window: T[] = [];\r\n\r\n  while (a.length > 0) {\r\n    window.push(a.pop()!);\r\n    if (window.length === count) {\r\n      result.push(window);\r\n      window = [];\r\n    }\r\n  }\r\n\r\n  if (window.length > 0) {\r\n    result.push(window);\r\n  }\r\n\r\n  return result;\r\n}\r\n","import * as React from \"react\";\r\n\r\nimport theme from \"@/theme/theme\";\r\n\r\nconst Field: React.FC = ({ children }) => {\r\n  return (\r\n    <svg width={theme.gridSizePx * 3 + 50} height={theme.gridSizePx * 3 + 50}>\r\n      {children}\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default Field;\r\n","import * as React from \"react\";\r\n\r\nimport theme from \"@/theme/theme\";\r\n\r\nconst childOffset = (theme.squareSizePx - theme.tokenSizePx) / 2;\r\n\r\nexport interface GridProps {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nconst Grid: React.FC<GridProps> = ({ x, y, children }) => {\r\n  const arrayChildren = React.Children.toArray(children);\r\n  const lineChildren: React.ReactNode[] = [];\r\n  for (let i = 1; i <= 2; i++) {\r\n    lineChildren.push(\r\n      <line\r\n        key={`x${i}`}\r\n        x1={0}\r\n        y1={theme.squareSizePx * i}\r\n        x2={theme.squareSizePx * 3}\r\n        y2={theme.squareSizePx * i}\r\n      />\r\n    );\r\n    lineChildren.push(\r\n      <line\r\n        key={`y${i}`}\r\n        y1={0}\r\n        x1={theme.squareSizePx * i}\r\n        y2={theme.squareSizePx * 3}\r\n        x2={theme.squareSizePx * i}\r\n      />\r\n    );\r\n  }\r\n  let contentChildren: React.ReactNode[] = [];\r\n  for (let i = 0; i < arrayChildren.length; i++) {\r\n    const x = i % 3;\r\n    const y = Math.floor(i / 3);\r\n    contentChildren.push(\r\n      <g\r\n        transform={`translate(${theme.squareSizePx * x +\r\n          childOffset}, ${theme.squareSizePx * y + childOffset})`}\r\n        key={`ch${i}`}\r\n      >\r\n        {arrayChildren[i]}\r\n      </g>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <g transform={`translate(${x}, ${y})`}>\r\n      <g strokeWidth={1} stroke=\"black\">\r\n        {lineChildren}\r\n      </g>\r\n      {contentChildren}\r\n    </g>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import * as React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { AppState } from \"@/state\";\r\nimport { placeToken } from \"@/services/game/actions/placeToken\";\r\nimport { winningPositions } from \"@/services/game/selectors\";\r\n\r\nimport Token from \"./Token\";\r\n\r\nconst PositionedToken: React.FC<{ position: number }> = ({ position }) => {\r\n  const dispatcher = useDispatch();\r\n  const tokenState = useSelector(\r\n    (state: AppState) => state.services.game.tokens[position]\r\n  );\r\n\r\n  let isWinning = false;\r\n  const winningPosition = useSelector(winningPositions);\r\n  if (winningPosition && winningPosition.includes(position)) {\r\n    isWinning = true;\r\n  }\r\n\r\n  const onClick = React.useCallback(() => {\r\n    dispatcher(placeToken(position));\r\n  }, [position]);\r\n\r\n  return (\r\n    <Token\r\n      isWinningToken={isWinning}\r\n      tokenType={tokenState}\r\n      onClick={onClick}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PositionedToken;\r\n","import * as React from \"react\";\r\n\r\nimport theme from \"@/theme/theme\";\r\nimport { TokenType } from \"@/services/game/types\";\r\n\r\nexport interface TokenProps {\r\n  tokenType: TokenType | \"blank\";\r\n  isWinningToken: boolean;\r\n  onClick?(e: React.MouseEvent<SVGGElement>): void;\r\n}\r\n\r\ninterface TokenPartProps {\r\n  color: string;\r\n  onClick?(e: React.MouseEvent<SVGGElement>): void;\r\n}\r\n\r\nconst size = theme.tokenSizePx;\r\n\r\nconst TokenX: React.FC<TokenPartProps> = ({ onClick, color }) => (\r\n  <g strokeWidth={1} stroke={color} onClick={onClick}>\r\n    <rect strokeWidth={0} fill=\"transparent\" width={size} height={size} />\r\n    <line x1={0} y1={0} x2={size} y2={size} />\r\n    <line x1={size} y1={0} x2={0} y2={size} />\r\n  </g>\r\n);\r\nconst TokenO: React.FC<TokenPartProps> = ({ onClick, color }) => (\r\n  <g strokeWidth={1} stroke={color} fill=\"none\" onClick={onClick}>\r\n    <rect strokeWidth={0} fill=\"transparent\" width={size} height={size} />\r\n    <circle cx={size / 2} cy={size / 2} r={size / 2} />\r\n  </g>\r\n);\r\n\r\nconst TokenBlank: React.FC<TokenPartProps> = ({ onClick }) => (\r\n  <rect fill=\"transparent\" width={size} height={size} onClick={onClick} />\r\n);\r\n\r\nconst Token: React.FC<TokenProps> = ({\r\n  tokenType,\r\n  isWinningToken,\r\n  onClick\r\n}) => {\r\n  const color = isWinningToken ? \"red\" : \"black\";\r\n  switch (tokenType) {\r\n    case \"x\":\r\n      return <TokenX color={color} onClick={onClick} />;\r\n    case \"o\":\r\n      return <TokenO color={color} onClick={onClick} />;\r\n    case \"blank\":\r\n      return <TokenBlank color=\"transparent\" onClick={onClick} />;\r\n    default:\r\n      return <div>Error</div>;\r\n  }\r\n};\r\n\r\nexport default Token;\r\n","import * as React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nimport { reset } from \"@/services/game/actions/reset\";\r\n\r\nconst ResetButton: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const onClick = React.useCallback(() => {\r\n    dispatch(reset());\r\n  }, [dispatch]);\r\n\r\n  return <button onClick={onClick}>Reset</button>;\r\n};\r\n\r\nexport default ResetButton;\r\n"],"sourceRoot":""}